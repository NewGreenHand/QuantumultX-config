# 此配置由 坑飞 编写

# 以 ";" 或 "#" 或 "//" 开头的行为注释行。

# Quantumult 使用 HTTP HEAD 方法对测试网址 server_check_url 进行网页响应性测试（测试结果为通过该节点访问此网页获得 HTTP 响应所需要的时间），来确认节点的可用性。
# Quantumult 界面中的延迟测试方式均为网页响应性测试，显示的最终延迟均为通过对应节点访问测试网页获得 HTTP 响应所需要时间。
# 由于 Trojan 协议为无响应校验协议，使得 HTTP 检测方式即使获得了 HTTP 响应，也不代表节点一定可用。
#
# dns_exclusion_list包含禁用占位符IP(198.18.*)的域，不在dns_exclusion_list中的域都启用了占位符IP，并开启了远程解析设置。
#
# udp_白名单包含目的UDP端口，空表示所有端口都在udp_白名单中。目的端口不在udp_白名单中的UDP报文(通过Quantumult隧道接口)将被丢弃。此设置与策略无关，也与代理(服务器)端口无关。
#
# Quantumult不会处理被排除的路由的流量。修改后最好重新启动您的设备。
#
# resource_parser_url示例可以在https://raw.githubusercontent.com/crossutility/Quantumult-X/master/resource-parser.js上找到
#
[general]
# QuanX会对server_check_url指定的网址进行相应测试，以确认节点的可用性
server_check_url=http://captive.apple.com

# list中的域名将不使用fake-ip方式, 多个域名用“, ”连接。其它域名则全部采用 fake-ip及远程解析的模式
dns_exclusion_list=*.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me, *.pingan.com.cn, *.cmbchina.com

# 用于获取及展示节点信息
geo_location_checker=http://ip-api.com/json/?lang=zh-CN, https://raw.githubusercontent.com/Orz-3/Orz-3/master/QuantumultX/IP.js

# 资源解析器，自定义各类远程资源的转换
resource_parser_url=https://cdn.jsdelivr.net/gh/KOP-XIAO/QuantumultX@master/Scripts/resource-parser.Js

# 下列路径将不经过QuanX的处理
excluded_routes= 192.168.0.0/16, 172.16.0.0/12, 100.64.0.0/10, 10.0.0.0/24

#
# 从当前网络(系统)获取的DNS服务器将总是用于更好的性能(你可以使用"no-system"禁用此功能，但你应该至少添加一个自定义DNS服务器，如"server=223.5.5.5")。
# 设置no-ipv6时，Quanumult X Tunnel的DNS模块会直接让AAAA查询失败，但仍然允许IPv6 DNS服务器进行A查询。
# 查询结果将只用于评估过滤器或通过直接策略连接，当通过服务器连接时，结果将不会被使用，Quantumult将永远不会知道相关域的目的IP。
# 在这里不允许直接设置127.0.0.1为一个域。如果您想要某个域(例如:example.com)为127.0.0.1，只需将“host, example.com, reject”添加到“filter_local”部分。拒绝操作将向查询返回127.0.0.1的DNS响应。
#
[dns]
no-ipv6
server=119.29.29.29
address=/mtalk.google.com/108.177.125.188
server=/dl.google.com/119.29.29.29
server=/dl.l.google.com/119.29.29.29
# 指定域名解析dns
server=/*.taobao.com/223.5.5.5
server=/*.tmall.com/223.5.5.5
server=/*.alipay.com/223.5.5.5
server=/*.alicdn.com/223.5.5.5
server=/*.aliyun.com/223.5.5.5
server=/*.jd.com/119.28.28.28
server=/*.qq.com/119.28.28.28
server=/*.tencent.com/119.28.28.28
server=/*.weixin.com/119.28.28.28
server=/*.bilibili.com/119.29.29.29
server=/hdslb.com/119.29.29.29
server=/*.163.com/119.29.29.29
server=/*.126.com/119.29.29.29
server=/*.126.net/119.29.29.29
server=/*.127.net/119.29.29.29
server=/*.netease.com/119.29.29.29
server=/*.mi.com/119.29.29.29
server=/*.xiaomi.com/119.29.29.29

#
# static policy指向手动选择的候选服务器。
# available policy指向基于server_check_url的候选服务器中的第一个可用服务器(当策略被触发且策略结果不可用时，并发url延迟测试将立即启动。如果此时没有网络请求采用策略，这意味着策略处于空闲状态，即使服务器关闭，测试也不会启动。那时，您可以通过手动启动测试来更新服务器状态，但这没有任何意义)。
# round-robin策略指向下一个连接的候选服务器。
# url-latency-benchmark策略指向具有最佳url延迟结果的服务器(将考虑参数容忍ms)。当用户手动在Quantumult X容器应用程序中启动url测试时，策略结果也会被更新。此类型策略有一个名为check-interval (seconds)的参数，如果该策略被任何请求激活，那么将考虑间隔。
# ssid策略根据网络环境指向服务器。
# Param resource-tag-regex和server-tag-regex仅适用于静态、可用和轮询类型的策略。
#
[policy]
static=全球加速, 香港, 台湾, 日本, 新加坡, 美国, proxy, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Global.png
static=苹果服务, direct, 香港, 台湾, 美国, 日本, 新加坡, proxy, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Apple.png
static=港台番剧, direct, 香港, 台湾, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/StreamingSE.png
static=国际媒体, 香港, 台湾, 日本, 美国, 新加坡, proxy, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Streaming.png
static=黑白名单, 全球加速, direct, 香港, 台湾, 日本, 新加坡, 美国, proxy, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/Final.png
url-latency-benchmark=香港, server-tag-regex=(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|美)).)*$, check-interval=600, tolerance=0, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png
url-latency-benchmark=台湾, server-tag-regex=(?=.*(台|TW|(?i)Taiwan))^((?!(港|日|韩|新|美)).)*$, check-interval=600, tolerance=0, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/TW.png
url-latency-benchmark=日本, server-tag-regex=(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$, check-interval=600, tolerance=0, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png
url-latency-benchmark=新加坡, server-tag-regex=(?=.*(新|狮|獅|SG|(?i)Singapore))^((?!(港|台|日|韩|美)).)*$, check-interval=600, tolerance=0, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png
url-latency-benchmark=美国, server-tag-regex=(?=.*(美|US|(?i)States|American))^((?!(港|台|日|韩|新)).)*$, check-interval=600, tolerance=0, img-url=https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png

# 参数"tag"和"enabled"是可选的。
# 所有远程资源的同步时间间隔默认为86400秒。
# update-interval=172800设置自动同步间隔(秒), 负数表示禁用自动同步。
[server_remote]
https://haojiahuo.live/link/taedQsVf8AmgGx8L?list=quantumultx, tag=好家伙, update-interval=172800, opt-parser=false, enabled=true

#
# 参数"tag", "force-policy"和"enabled"是可选的。
# 当存在force-policy时, 远程资源过滤器中的策略将被忽略并使用。
#
[filter_remote]
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Unbreak.list, tag=规则修正, force-policy=direct, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Advertising.list, tag=广告拦截, force-policy=reject, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/NobyDa/Script/master/Surge/AdRule.list, tag=广告拦截, force-policy=reject, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Hijacking.list, tag=运营劫持, force-policy=reject, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Privacy.list, tag=隐私保护, force-policy=reject, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/Video/TikTok.list, tag=海外抖音, force-policy=全球加速, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/Region/HK.list, tag=流媒体HK, force-policy=香港, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/Region/TW.list, tag=流媒体TW, force-policy=台湾, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/Region/JP.list, tag=流媒体JP, force-policy=日本, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/Region/US.list, tag=流媒体US, force-policy=美国, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/Streaming.list, tag=国际媒体, force-policy=国际媒体, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/StreamingSE.list, tag=港台番剧, force-policy=港台番剧, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Global.list, tag=全球加速, force-policy=全球加速, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Extra/Apple/AppStore.list, tag=苹果服务, force-policy=苹果服务, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Extra/Apple/AppStoreConnect.list, tag=苹果服务, force-policy=苹果服务, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Extra/Apple/TestFlight.list, tag=Testflight, force-policy=苹果服务, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/China.list, tag=国内网站, force-policy=direct, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Extra/ChinaIP.list, tag=ChinaIP, force-policy=direct, update-interval=86400, opt-parser=true, enabled=true

#
# 参数"tag"和"enabled"是可选的。
#
[rewrite_remote]
# 远程重写订阅
https://raw.githubusercontent.com/Orz-3/QuantumultX/master/JS.conf, tag=Script, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/NobyDa/Script/master/QuantumultX/Rewrite_lhie1.conf, tag=lhie1去广告, update-interval=86400, opt-parser=false, enabled=false
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/General.conf, tag=神机重定向, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/NobyDa/Script/master/QuantumultX/Js.conf, tag=NobyDa Js, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/mymoonyue/QuantumultX/master/Scripts/emby.conf, tag=Emby, update-interval=86400, opt-parser=true, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/YouTubeAds.conf, tag=YouTube去广告, update-interval=86400, opt-parser=true, enabled=false
https://raw.githubusercontent.com/ddgksf2013/Cuttlefish/master/Rewrite/Xxys.conf, tag=小小影视Vip&免广告, update-interval=86400, opt-parser=true, enabled=false

https://cdn.jsdelivr.net/gh/nzw9314/QuantumultX@latest/Get_Cookie_Remote.conf, tag=Get_Cookie_Remote, enabled=true
https://cdn.jsdelivr.net/gh/nzw9314/QuantumultX@latest/Js.conf, tag=nzw整合远程脚本挂载conf, enabled=true
https://cdn.jsdelivr.net/gh/nzw9314/QuantumultX@latest/Scripts.conf, tag=nzw整合js脚本挂载conf, enabled=false

# 
# 只有obfs=http, obfs=ws, obfs=wss可以有可选的"obfs-uri"字段。
# 在wss中的obfs-host参数将用于TLS握手和HTTP报头主机字段，如果obfs-host没有设置为wss服务器地址将被使用。
# 当前不支持VMess和木马的UDP中继。
# 当使用obfs=ws和obfs=wss时，服务器端可以使用mux = 0的v2ray-plugin或v2ray-core部署。
# obfs插件tls1.2_ticket_auth比tls1.2_ticket_fastauth和obfs tls多一个RTT，你最好使用tls1.2_ticket_fastauth代替。
# chacha20-ietf-poly1305和chacha20-poly1305在VMess配置中有相同的效果。
# 
[server_local]

# 本地过滤规则
[filter_local]
;user-agent, ?abc*, proxy
;host, www.google.com, proxy
;host-keyword, adsite, reject
;host-suffix, googleapis.com, proxy
;ip6-cidr, 2001:4860:4860::8888/32, direct
# 以下IP 不走代理直接访问
host-suffix, local, direct
ip-cidr, 10.0.0.0/8, direct
ip-cidr, 127.0.0.0/8, direct
ip-cidr, 172.16.0.0/12, direct
ip-cidr, 192.168.0.0/16, direct
ip-cidr, 224.0.0.0/24, direct
# 国内域名直接访问
geoip, cn, direct
# 其他的都走代理
final, proxy

# 
# “拒绝”返回HTTP状态代码404没有任何内容。
# reject-200返回没有内容的HTTP状态码200。
# reject-img返回HTTP状态码200，内容1px gif。
# reject-dict返回HTTP状态码200，内容为空json对象。
# reject-array返回HTTP状态码200，内容为空json数组。
# request-header适用于所有http报头，而不仅仅是一个报头，所以你可以在一个正则表达式中匹配两个或多个报头，包括CRLF。
# echo-response"只是回复匹配URL的内容类型响应的正文，正文文件应该保存在"On My iPhone - Quantumult X - Data"。
# 如果“重写”与正文相关，那么与长度和编码相关的HTTP报头字段将被Quantumult自动处理，所以你不应该自己处理它们。对于response-body和script-response-body，最大支持的解压缩响应体大小为2 * 1024kB(iOS 14+)。
# 如果body为空，重写body相关的代码将不会被执行。
# 在重写中使用javascript时，你可以使用这些对象:$request， $response， $notify(title, subtitle, message)， console.log(message)和Quantumult的内置对象都有前缀"$"。
# 支持:$请求。计划,美元的请求。方法,美元的请求。请求url,美元。路径,美元的请求。头,美元的回应。statusCode, $响应。头,response.body美元
# $notify(标题，副标题，消息)将发布iOS通知，如果量子加密通知已启用。
# $prefs用于持久化存储:$prefs. valueforkey (key)， $prefs. valueforkey (key)。setValueForKey(value, key)， $prefs.removeValueForKey(key)， $prefs.removeAllValues()。
# console.log(message)将日志输出到Quantumult日志文件中。
# setTimeout(function() {}， interval)将在interval(ms)之后运行函数。
# script-request-header, script-request-body, script-response-header, script-response-body, script-echo-response和script- analysis -echo-response应该保存在本地“On My iPhone - Quantumult X - scripts”或“iCloud Drive - Quantumult X - scripts”。样品可以在https://github.com/crossutility/Quantumult-X上找到
# script- analysis -echo-response和script-echo-response的区别在于前者将等待请求体。
# 
[rewrite_local]
# 京东比价(By yichahucha)
^https?://api\.m\.jd\.com/client\.action\?functionId=(wareBusiness|serverConfig|basicConfig) url script-response-body https://raw.githubusercontent.com/yichahucha/surge/master/jd_price.js

#淘宝比价(By yichahucha)
^http://.+/amdc/mobileDispatch url script-request-body https://raw.githubusercontent.com/yichahucha/surge/master/tb_price.js
^https?://trade-acs\.m\.taobao\.com/gw/mtop\.taobao\.detail\.getdetail url script-response-body https://raw.githubusercontent.com/yichahucha/surge/master/tb_price.js

;^http://example\.com/resource1/1/ url reject
;^http://example\.com/resource1/2/ url reject-img
;^http://example\.com/resource1/3/ url reject-200
;^http://example\.com/resource1/4/ url reject-dict
;^http://example\.com/resource1/5/ url reject-array
;^http://example\.com/resource2/ url 302 http://example.com/new-resource2/
;^http://example\.com/resource3/ url 307 http://example.com/new-resource3/
;^http://example\.com/resource4/ url request-header ^GET /resource4/ HTTP/1\.1(\r\n) request-header GET /api/ HTTP/1.1$1
;^http://example\.com/resource4/ url request-header (\r\n)User-Agent:.+(\r\n) request-header $1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36$2
;^http://example\.com/resource5/ url request-body "info":\[.+\],"others" request-body "info":[],"others"
;^http://example\.com/resource5/ url response-body "info":\[.+\],"others" response-body "info":[],"others"
;^http://example\.com/resource5/ url echo-response text/html echo-response index.html
;^http://example\.com/resource6/ url script-response-body response-body.js
;^http://example\.com/resource7/ url script-echo-response script-echo.js
;^http://example\.com/resource8/ url script-response-header response-header.js
;^http://example\.com/resource9/ url script-request-header request-header.js
;^http://example\.com/resource10/ url script-request-body request-body.js

#
# $task.fetch()创建一个HTTP请求并处理响应，只支持文本体。一个$task.fetch()可以嵌入到另一个$task.fetch()的完成处理程序中，如果你想要串行请求而不是当前请求。
# 脚本应该保存在本地“在我的iPhone -量子密码X -脚本”或“iCloud驱动器-量子密码X -脚本”。样品可以在https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js上找到
# HTTP请求超时时间默认为10秒。
#
#支持5或6个cron字段，不包括命令字段。
#
[task_local]
;* * * * * sample-task.js
;* * * * * sample-task2.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, enabled=true

#
# 部署本地HTTP服务器，使用JavaScript进行数据处理。
# 输入变量是$ request。url, reqeust美元。路径,reqeust美元。头,reqeust.body美元
# 使用$done({status:"HTTP/1.1 200 OK"}， headers:{}， body:"here is a string")输出响应。
# 您还可以使用签名或任何其他验证方法来验证请求是否合法。
# 部署完成后，您应该通过http://127.0.0.1:9999/your-path/your-api/访问它。
#
[http_backend]
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-backend.js, tag=fileConverter, path=^/example/v1/
;preference.js, tag=userPreference, path=^/preference/v1/, img-url=https://example.com, enabled=true
;convert.js, tag=fileConverter, path=^/convert/v1/


# 
# MitM只处理TLS SNI或“hostname”中的目的地址。
# 
# 默认情况下当MitM启用HTTPS请求,Quantumult X获取证书(证书将被缓存)从原始网站保留大部分需要正本证书信息和使用MitM根CA续签,这是推荐的(而且更兼容)的方式创建MitM证书。
# 偶尔有些用户喜欢调试HTTPS请求，它的域不存在，所以原始证书甚至不存在。这时会出现参数simple_cert_hostname。simple_cert_hostname(和hostname)中带有TLS SNI名称的HTTPS请求将使用纯本地生成的MitM证书。
# 
# 重要! !您应该始终保持您的CA密码和p12私有。
# 
[mitm]
;passphrase =
;p12 =
;skip_validating_cert = false
;force_sni_domain_name = false
;hostname = *.example.com, *.sample.com, non-existed-domain.com, *.non-connected-domain.com
;simple_cert_hostname = non-existed-domain.com, *.non-connected-domain.com
